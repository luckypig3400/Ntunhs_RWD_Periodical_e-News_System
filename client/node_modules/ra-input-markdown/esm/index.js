var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import React, { Component } from 'react';
import ReactMde from 'react-mde';
import * as Showdown from 'showdown';
import { addField } from 'ra-core';
import PropTypes from 'prop-types';
import FormControl from '@material-ui/core/FormControl';
import { withStyles } from '@material-ui/core/styles';
import 'react-mde/lib/styles/css/react-mde-all.css';
var styles = {};
var MarkdownInput = /** @class */ (function (_super) {
    __extends(MarkdownInput, _super);
    function MarkdownInput(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            value: '',
            tab: 'write'
        };
        return _this;
    }
    MarkdownInput.prototype.componentDidMount = function () {
        var value = this.props.input.value;
        this.setState({ value: value });
        this.converter = new Showdown.Converter({
            tables: true,
            simplifiedAutoLink: true,
            strikethrough: true,
            tasklists: true
        });
    };
    MarkdownInput.prototype.handleValueChange = function (value) {
        this.setState({ value: value });
        this.props.input.onChange(value);
    };
    ;
    MarkdownInput.prototype.handleTabChange = function (tab) {
        this.setState({ tab: tab });
    };
    ;
    MarkdownInput.prototype.render = function () {
        var _this = this;
        return (React.createElement(FormControl, { fullWidth: true, className: 'ra-input-mde' },
            React.createElement(ReactMde, { onChange: function (value) { return _this.handleValueChange(value); }, onTabChange: function (tab) { return _this.handleTabChange(tab); }, value: this.state.value, generateMarkdownPreview: function (markdown) { return Promise.resolve(_this.converter.makeHtml(markdown)); }, selectedTab: this.state.tab })));
    };
    MarkdownInput.propTypes = {
        input: PropTypes.object,
        source: PropTypes.string,
    };
    return MarkdownInput;
}(Component));
var MarkDownInputWithField = addField(withStyles(styles)(MarkdownInput));
MarkDownInputWithField.defaultProps = {
    addLabel: true,
    fullWidth: true,
};
export default MarkDownInputWithField;
